<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!--缓存管理器的配置文件 。-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--&lt;!&ndash; 凭证匹配器 &ndash;&gt;-->
    <!--<bean id="credentialsMatcher" class="com.hdecic.ecampus.web.credentials.RetryLimitHashedCredentialsMatcher">-->
    <!--&lt;!&ndash;构造方法的注入参数&ndash;&gt;-->
    <!--<constructor-arg ref="cacheManager"/>-->
    <!--<property name="hashAlgorithmName" value="md5"/>-->
    <!--<property name="hashIterations" value="2"/>-->
    <!--<property name="storedCredentialsHexEncoded" value="true"/>-->
    <!--</bean>-->


    <!-- 认证授权 Realm实现 -->
    <bean id="userRealm" class="cn.edu.hebtu.www.clubassembly.web.realm.UserRealm">
        <!--<property name="credentialsMatcher" ref="credentialsMatcher"/>-->
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>


    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 基于Form表单的身份验证过滤器 -->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/login.jsp"/>
    </bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--首页，进入到/security/showloginfor控制器方法内。-->
        <property name="loginUrl" value="/index"/>
        <!--<property name="successUrl" value="/home.jsp"/>-->
        <!--无权限界面-->
        <property name="unauthorizedUrl" value="/background/login"/>
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>

        <property name="filterChainDefinitions">
            <value>
                /index=anon
                /login = anon
                /manager/login = anon
                /active = anon
                /checkemail = anon
                /getcity = anon
                /getschool = anon
                /register = anon
                /uploadstudentimage = anon
                /static/** = anon
                /**=user
            </value>
        </property>
    </bean>


    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!-- Spring AOP auto-proxy creation (required to support Shiro annotations) -->
    <!-- 启用shiro 注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <!--<property name="proxyTargetClass" value="true" />-->
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>